package com.bigoffs.rfid.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bigoffs.rfid.mvp.bean.dao.AllcationCase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALLCATION_CASE".
*/
public class AllcationCaseDao extends AbstractDao<AllcationCase, Long> {

    public static final String TABLENAME = "ALLCATION_CASE";

    /**
     * Properties of entity AllcationCase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BoxCode = new Property(1, String.class, "boxCode", false, "BOX_CODE");
        public final static Property Sign = new Property(2, boolean.class, "sign", false, "SIGN");
        public final static Property Incode = new Property(3, String.class, "incode", false, "INCODE");
        public final static Property RfidCode = new Property(4, String.class, "rfidCode", false, "RFID_CODE");
        public final static Property IsScan = new Property(5, boolean.class, "isScan", false, "IS_SCAN");
    }


    public AllcationCaseDao(DaoConfig config) {
        super(config);
    }
    
    public AllcationCaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALLCATION_CASE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOX_CODE\" TEXT," + // 1: boxCode
                "\"SIGN\" INTEGER NOT NULL ," + // 2: sign
                "\"INCODE\" TEXT," + // 3: incode
                "\"RFID_CODE\" TEXT," + // 4: rfidCode
                "\"IS_SCAN\" INTEGER NOT NULL );"); // 5: isScan
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ALLCATION_CASE_RFID_CODE_DESC ON \"ALLCATION_CASE\"" +
                " (\"RFID_CODE\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALLCATION_CASE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AllcationCase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String boxCode = entity.getBoxCode();
        if (boxCode != null) {
            stmt.bindString(2, boxCode);
        }
        stmt.bindLong(3, entity.getSign() ? 1L: 0L);
 
        String incode = entity.getIncode();
        if (incode != null) {
            stmt.bindString(4, incode);
        }
 
        String rfidCode = entity.getRfidCode();
        if (rfidCode != null) {
            stmt.bindString(5, rfidCode);
        }
        stmt.bindLong(6, entity.getIsScan() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AllcationCase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String boxCode = entity.getBoxCode();
        if (boxCode != null) {
            stmt.bindString(2, boxCode);
        }
        stmt.bindLong(3, entity.getSign() ? 1L: 0L);
 
        String incode = entity.getIncode();
        if (incode != null) {
            stmt.bindString(4, incode);
        }
 
        String rfidCode = entity.getRfidCode();
        if (rfidCode != null) {
            stmt.bindString(5, rfidCode);
        }
        stmt.bindLong(6, entity.getIsScan() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AllcationCase readEntity(Cursor cursor, int offset) {
        AllcationCase entity = new AllcationCase( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // boxCode
            cursor.getShort(offset + 2) != 0, // sign
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // incode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rfidCode
            cursor.getShort(offset + 5) != 0 // isScan
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AllcationCase entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBoxCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSign(cursor.getShort(offset + 2) != 0);
        entity.setIncode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRfidCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsScan(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AllcationCase entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AllcationCase entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AllcationCase entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
