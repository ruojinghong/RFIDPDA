package com.bigoffs.rfid.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bigoffs.rfid.mvp.bean.dao.GroundingAllocationDetailInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUNDING_ALLOCATION_DETAIL_INFO".
*/
public class GroundingAllocationDetailInfoDao extends AbstractDao<GroundingAllocationDetailInfo, Long> {

    public static final String TABLENAME = "GROUNDING_ALLOCATION_DETAIL_INFO";

    /**
     * Properties of entity GroundingAllocationDetailInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property InCode = new Property(1, String.class, "inCode", false, "IN_CODE");
        public final static Property BarCode = new Property(2, String.class, "barCode", false, "BAR_CODE");
        public final static Property ShelfCode = new Property(3, String.class, "shelfCode", false, "SHELF_CODE");
        public final static Property Rfid = new Property(4, String.class, "rfid", false, "RFID");
        public final static Property IsExist = new Property(5, boolean.class, "isExist", false, "IS_EXIST");
    }


    public GroundingAllocationDetailInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GroundingAllocationDetailInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUNDING_ALLOCATION_DETAIL_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IN_CODE\" TEXT," + // 1: inCode
                "\"BAR_CODE\" TEXT," + // 2: barCode
                "\"SHELF_CODE\" TEXT," + // 3: shelfCode
                "\"RFID\" TEXT," + // 4: rfid
                "\"IS_EXIST\" INTEGER NOT NULL );"); // 5: isExist
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUNDING_ALLOCATION_DETAIL_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroundingAllocationDetailInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String inCode = entity.getInCode();
        if (inCode != null) {
            stmt.bindString(2, inCode);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(3, barCode);
        }
 
        String shelfCode = entity.getShelfCode();
        if (shelfCode != null) {
            stmt.bindString(4, shelfCode);
        }
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(5, rfid);
        }
        stmt.bindLong(6, entity.getIsExist() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroundingAllocationDetailInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String inCode = entity.getInCode();
        if (inCode != null) {
            stmt.bindString(2, inCode);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(3, barCode);
        }
 
        String shelfCode = entity.getShelfCode();
        if (shelfCode != null) {
            stmt.bindString(4, shelfCode);
        }
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(5, rfid);
        }
        stmt.bindLong(6, entity.getIsExist() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroundingAllocationDetailInfo readEntity(Cursor cursor, int offset) {
        GroundingAllocationDetailInfo entity = new GroundingAllocationDetailInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // inCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // barCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shelfCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rfid
            cursor.getShort(offset + 5) != 0 // isExist
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroundingAllocationDetailInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBarCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShelfCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRfid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsExist(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroundingAllocationDetailInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroundingAllocationDetailInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroundingAllocationDetailInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
