package com.bigoffs.rfid.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bigoffs.rfid.mvp.bean.dao.ProductInfoBackupCase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_INFO_BACKUP_CASE".
*/
public class ProductInfoBackupCaseDao extends AbstractDao<ProductInfoBackupCase, Long> {

    public static final String TABLENAME = "PRODUCT_INFO_BACKUP_CASE";

    /**
     * Properties of entity ProductInfoBackupCase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProductId = new Property(1, int.class, "productId", false, "PRODUCT_ID");
        public final static Property Incode = new Property(2, String.class, "incode", false, "INCODE");
        public final static Property Size = new Property(3, String.class, "size", false, "SIZE");
        public final static Property Barcode = new Property(4, String.class, "barcode", false, "BARCODE");
        public final static Property BrandName = new Property(5, String.class, "brandName", false, "BRAND_NAME");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
        public final static Property PicUrl = new Property(7, String.class, "picUrl", false, "PIC_URL");
        public final static Property DetailId = new Property(8, int.class, "detailId", false, "DETAIL_ID");
        public final static Property Rfid = new Property(9, String.class, "rfid", false, "RFID");
        public final static Property Shelf = new Property(10, String.class, "shelf", false, "SHELF");
    }


    public ProductInfoBackupCaseDao(DaoConfig config) {
        super(config);
    }
    
    public ProductInfoBackupCaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_INFO_BACKUP_CASE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PRODUCT_ID\" INTEGER NOT NULL ," + // 1: productId
                "\"INCODE\" TEXT," + // 2: incode
                "\"SIZE\" TEXT," + // 3: size
                "\"BARCODE\" TEXT," + // 4: barcode
                "\"BRAND_NAME\" TEXT," + // 5: brandName
                "\"STATUS\" INTEGER NOT NULL ," + // 6: status
                "\"PIC_URL\" TEXT," + // 7: picUrl
                "\"DETAIL_ID\" INTEGER NOT NULL ," + // 8: detailId
                "\"RFID\" TEXT," + // 9: rfid
                "\"SHELF\" TEXT);"); // 10: shelf
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_INFO_BACKUP_CASE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductInfoBackupCase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProductId());
 
        String incode = entity.getIncode();
        if (incode != null) {
            stmt.bindString(3, incode);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(4, size);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(5, barcode);
        }
 
        String brandName = entity.getBrandName();
        if (brandName != null) {
            stmt.bindString(6, brandName);
        }
        stmt.bindLong(7, entity.getStatus());
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(8, picUrl);
        }
        stmt.bindLong(9, entity.getDetailId());
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(10, rfid);
        }
 
        String shelf = entity.getShelf();
        if (shelf != null) {
            stmt.bindString(11, shelf);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductInfoBackupCase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProductId());
 
        String incode = entity.getIncode();
        if (incode != null) {
            stmt.bindString(3, incode);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(4, size);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(5, barcode);
        }
 
        String brandName = entity.getBrandName();
        if (brandName != null) {
            stmt.bindString(6, brandName);
        }
        stmt.bindLong(7, entity.getStatus());
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(8, picUrl);
        }
        stmt.bindLong(9, entity.getDetailId());
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(10, rfid);
        }
 
        String shelf = entity.getShelf();
        if (shelf != null) {
            stmt.bindString(11, shelf);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProductInfoBackupCase readEntity(Cursor cursor, int offset) {
        ProductInfoBackupCase entity = new ProductInfoBackupCase( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // productId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // incode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // size
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // barcode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // brandName
            cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // picUrl
            cursor.getInt(offset + 8), // detailId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rfid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // shelf
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductInfoBackupCase entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductId(cursor.getInt(offset + 1));
        entity.setIncode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSize(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBarcode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBrandName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setPicUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDetailId(cursor.getInt(offset + 8));
        entity.setRfid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShelf(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProductInfoBackupCase entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProductInfoBackupCase entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductInfoBackupCase entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
