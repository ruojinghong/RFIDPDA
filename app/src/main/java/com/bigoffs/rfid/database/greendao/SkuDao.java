package com.bigoffs.rfid.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bigoffs.rfid.mvp.bean.Sku;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SKU".
*/
public class SkuDao extends AbstractDao<Sku, String> {

    public static final String TABLENAME = "SKU";

    /**
     * Properties of entity Sku.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property InCode = new Property(0, String.class, "inCode", true, "IN_CODE");
        public final static Property ShelfCode = new Property(1, String.class, "shelfCode", false, "SHELF_CODE");
        public final static Property BarCode = new Property(2, String.class, "barCode", false, "BAR_CODE");
        public final static Property Epc = new Property(3, String.class, "epc", false, "EPC");
    }


    public SkuDao(DaoConfig config) {
        super(config);
    }
    
    public SkuDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SKU\" (" + //
                "\"IN_CODE\" TEXT PRIMARY KEY NOT NULL ," + // 0: inCode
                "\"SHELF_CODE\" TEXT," + // 1: shelfCode
                "\"BAR_CODE\" TEXT," + // 2: barCode
                "\"EPC\" TEXT);"); // 3: epc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SKU\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sku entity) {
        stmt.clearBindings();
 
        String inCode = entity.getInCode();
        if (inCode != null) {
            stmt.bindString(1, inCode);
        }
 
        String shelfCode = entity.getShelfCode();
        if (shelfCode != null) {
            stmt.bindString(2, shelfCode);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(3, barCode);
        }
 
        String epc = entity.getEpc();
        if (epc != null) {
            stmt.bindString(4, epc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sku entity) {
        stmt.clearBindings();
 
        String inCode = entity.getInCode();
        if (inCode != null) {
            stmt.bindString(1, inCode);
        }
 
        String shelfCode = entity.getShelfCode();
        if (shelfCode != null) {
            stmt.bindString(2, shelfCode);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(3, barCode);
        }
 
        String epc = entity.getEpc();
        if (epc != null) {
            stmt.bindString(4, epc);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Sku readEntity(Cursor cursor, int offset) {
        Sku entity = new Sku( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // inCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shelfCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // barCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // epc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sku entity, int offset) {
        entity.setInCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setShelfCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBarCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEpc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Sku entity, long rowId) {
        return entity.getInCode();
    }
    
    @Override
    public String getKey(Sku entity) {
        if(entity != null) {
            return entity.getInCode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sku entity) {
        return entity.getInCode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
